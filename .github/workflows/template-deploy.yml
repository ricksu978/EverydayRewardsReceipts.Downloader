name: Template - Deploy Pipeline

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      resource-group:
        required: true
        type: string
      bicepparam-file:
        required: true
        type: string


permissions:
  id-token: write
  contents: read

env:
  SQL_MIGRATION_SCRIPT: ${{ github.workspace }}/migration.sql

jobs:
  deployment:
    name: Deployment
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:

      # Git- Checkout
      - name: Git - Checkout
        uses: actions/checkout@v3

      # Azure - Login
      - name: Azure - Login
        uses: azure/login@v1
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # Docker - Download Artifact
      - name: Docker - Download Artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      # Docker - Login to GitHub Container Registry
      - name: Docker - Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Bicep
        shell: pwsh
        run: |
          az bicep upgrade

          $DEPLOYMENT_OUTPUT = az deployment group create `
              -n "GitHubActions" `
              -f ".\infra\main.bicep" `
              -g "${{ inputs.resource-group }}" `
              -p "${{ inputs.bicepparam-file }}" `
              -p environment=${{ inputs.environment }}
              -p planName=${{ vars.AZURE_PLAN_NAME }} `
              -p planResourceGroup=${{ vars.AZURE_PALN_RESOURCE_GROUP }} `
              --query properties.outputs | ConvertFrom-Json

      # # Docker - Tag and Push Image
      # - name: Docker - Tag and Push Image
      #   shell: pwsh
      #   run: |
      #     ./infra/powershell/TagAndPush-DockerImage.ps1 `
      #       -tarFile ${{ github.workspace}}/docker-image.tar `
      #       -repository ${{ steps.deployment.outputs.ACR_LOGIN_SERVER }}/${{ vars.ACR_REPOSITORY }} `
      #       -sha ${{ github.sha }} `
      #       -latest latest-${{ inputs.environment }} `
      #       -version ${{ github.ref_name }}

      # # EF - Generate Migration SQL Script
      # - name: EF - Generate Migration SQL Script
      #   run: |
      #     dotnet tool restore
      #     dotnet ef migrations script --idempotent \
      #       --output ${{ env.SQL_MIGRATION_SCRIPT }} \
      #       --project ./src/SSW.EagleEye.Infrastructure \
      #       --startup-project ./src/SSW.EagleEye.Console

      # # EF - Apply Migration SQL Script
      # - name: EF - Apply Migration SQL Script
      #   uses: 'azure/sql-action@v2.2.1'
      #   with:
      #     connection-string: ${{ steps.deployment.outputs.DATABASE_CONNECTION }}
      #     path: ${{ env.SQL_MIGRATION_SCRIPT }}

      # # Database - master - Create Login
      # - name: Database - master - Create Login
      #   uses: 'azure/sql-action@v2.2.1'
      #   with:
      #     connection-string: ${{ steps.deployment.outputs.DATABASE_CONNECTION_MASTER }}
      #     path: ${{ github.workspace }}/infra/sql/createDatabaseLogin.sql
      #     arguments: "-v databaseUsernameReadonly=${{ steps.deployment.outputs.DATABASE_USERNAME_READONLY }} -v databasePasswordReadonly=${{ steps.deployment.outputs.DATABASE_PASSWORD_READONLY }} -v databaseUsernameReadWrite=${{ steps.deployment.outputs.DATABASE_USERNAME_READWRITE }} -v databasePasswordReadWrite=${{ steps.deployment.outputs.DATABASE_PASSWORD_READWRITE }}"

      # # Database - ${{ steps.deployment.outputs.DATABASE_NAME }} Create User
      # - name: Database - ${{ steps.deployment.outputs.DATABASE_NAME }} - Create User
      #   uses: 'azure/sql-action@v2.2.1'
      #   with:
      #     connection-string: ${{ steps.deployment.outputs.DATABASE_CONNECTION }}
      #     path: ${{ github.workspace }}/infra/sql/createDatabaseUser.sql
      #     arguments: "-v databaseUsernameReadonly=${{ steps.deployment.outputs.DATABASE_USERNAME_READONLY }} -v databaseUsernameReadWrite=${{ steps.deployment.outputs.DATABASE_USERNAME_READWRITE }}"

      # Dump GitHub Context
      - name: Dump GitHub Context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: |
          echo '## Deploy Context' >> $GITHUB_STEP_SUMMARY
          echo '<details><summary>Deploy Context</summary>' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$GITHUB_CONTEXT" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '</details>' >> $GITHUB_STEP_SUMMARY
